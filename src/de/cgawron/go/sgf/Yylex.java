/* The following code was generated by JFlex 1.3.5 on 27.11.05 16:47 */

/**
 *
 * $Id: 4464fa6ae7475721f6ef39df55ded546168e4181 $
 *
 * © 2001 Christian Gawron. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 */
package de.cgawron.go.sgf;

import java.lang.System;
import java.io.IOException;
import de.cgawron.util.MiscEncodingReader;
import org.apache.log4j.Logger;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 27.11.05 16:47 from the specification file
 * <tt>file:/C:/Documents and Settings/Administrator/My Documents/Java-Test/Go/GoDiagram/trunk/src/de/cgawron/go/sgf/sgf.lex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner, InputPosition {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int MOVE = 3;
  final public static int NODE = 2;
  final public static int TOP = 1;
  final public static int NUMBER = 6;
  final public static int LABEL = 5;
  final public static int YYINITIAL = 0;
  final public static int POINTS = 4;
  final public static int TEXT = 7;
  final public static int PROPERTY = 8;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\2\1\4\2\0\1\15\22\0\1\2\7\0\1\1\1\5"+
    "\1\0\1\12\1\0\1\12\2\0\12\13\1\11\1\3\5\0\32\16"+
    "\1\10\1\14\1\6\3\0\32\7\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    15,    30,    45,    60,    75,    90,   105,   120,   135, 
      150,   165,   180,   135,   135,   135,   135,   165,   180,   135, 
      135,   195,   135,   135,   135,   210,   225,   240,   255,   270, 
      270,   285,   135,   300,   315,   330,   330,   330,   345,   360, 
      375,   150,   135,   165,   180,   135,   390,   405,   420,   435, 
      240,   255,   135,   135,   135,   450,   465,   330,   345,   135, 
      360,   375,   330,   480,   495,   135,   135,   510,   525,   540, 
      555,   570,   585,   135,   135
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\12\1\13\5\12\1\14\6\12\1\15\1\16\1\17"+
    "\1\12\1\20\1\12\1\21\1\16\1\22\5\16\1\12"+
    "\1\23\2\16\1\12\1\20\1\12\2\16\1\22\1\24"+
    "\4\16\1\12\1\23\2\16\1\12\1\20\1\12\1\16"+
    "\1\25\1\26\5\16\1\12\1\23\1\16\1\27\1\12"+
    "\1\20\1\12\1\30\1\31\1\32\1\12\4\16\1\12"+
    "\1\23\1\16\1\27\1\12\1\20\1\12\1\30\1\16"+
    "\1\33\1\12\4\16\1\12\1\23\2\16\1\12\1\20"+
    "\1\12\2\16\1\22\2\16\1\34\1\35\1\16\1\12"+
    "\1\23\3\36\1\37\1\40\1\36\1\41\5\36\1\42"+
    "\1\43\1\36\2\44\1\45\1\46\1\45\1\44\1\47"+
    "\1\50\5\44\1\45\1\51\21\0\1\52\1\53\1\52"+
    "\10\0\1\52\10\0\1\54\6\0\1\55\7\0\1\55"+
    "\1\56\5\0\1\57\7\0\1\60\6\0\1\55\7\0"+
    "\1\61\6\0\1\55\7\0\1\62\6\0\1\55\12\0"+
    "\1\63\1\64\11\0\1\65\4\0\1\64\3\0\4\36"+
    "\1\0\1\36\1\0\5\36\2\0\1\36\15\0\1\66"+
    "\1\0\4\67\1\70\10\67\1\71\1\67\4\0\1\66"+
    "\12\0\6\72\1\47\10\72\2\0\1\73\1\0\1\73"+
    "\3\0\1\74\4\0\1\73\1\0\6\72\1\47\1\75"+
    "\6\72\1\76\6\72\1\47\1\76\1\77\5\72\1\100"+
    "\7\0\1\101\1\56\5\0\1\57\6\0\1\102\1\54"+
    "\6\0\1\55\6\0\1\103\1\54\1\0\1\104\4\0"+
    "\1\55\7\0\1\54\1\0\1\105\4\0\1\55\15\0"+
    "\1\12\5\0\1\12\12\0\6\72\1\47\1\106\1\77"+
    "\5\72\1\100\7\0\1\101\1\56\15\0\1\107\7\0"+
    "\6\110\1\0\10\110\6\72\1\47\1\106\1\77\6\72"+
    "\7\0\1\111\7\0\6\110\1\112\10\110\6\0\1\113"+
    "\10\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  0,  1,  0,  9,  3,  1,  1,  9,  9,  9, 
     9,  1,  1,  9,  9,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  0, 13,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  9,  9,  9,  1,  1,  0,  0,  9,  0,  0,  1,  0, 
     0,  9,  9,  0,  0,  0,  0,  0,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    private static Logger logger = Logger.getLogger(Yylex.class);
    
    private int level = 0;

    public int getLine()
    {
	return yyline+1;
    }

    public int getColumn()
    {
	return yycolumn+1;
    }

    public String getCurrentLine()
    {
	int beg = yy_currentPos; 
	int end = yy_currentPos; 
	while (beg > 0 && yy_buffer[beg-1] != '\n') beg--;
	while (end < yy_endRead && yy_buffer[end] != '\n') end++;
	
	return new String(yy_buffer, beg, end-beg);
    }


    private static Yylex theLexer = null;

    public static void setCharset(String charSetName)
    {
	if (theLexer != null)
	    theLexer._setCharset(charSetName);
    }

    public void _setCharset(String charSetName)
    {
	MiscEncodingReader mer = (MiscEncodingReader) yy_reader;
	try {
	  //mer.setCharset(charSetName, yy_currentPos);
	  mer.setCharset(charSetName, yy_markedPos);
	  yy_reader = null;
	  yyclose();
	  yy_reader = mer;
	  yy_atEOF  = false;
	  yy_endRead = yy_startRead = 0;
	  yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
	}
	catch (IOException err) {
	  throw new Error(err);
	}
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
      theLexer = this;
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[600];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 52) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      logger.info("eof reached");
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;
    int yy_pushbackPos_l = yy_pushbackPos = -1;
    boolean yy_was_pushback;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            yy_pushbackPos = yy_pushbackPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            yy_pushbackPos_l = yy_pushbackPos;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 2) == 2 )
            yy_pushbackPos_l = yy_currentPos_l;

          if ( (yy_attributes & 1) == 1 ) {
            yy_was_pushback = (yy_attributes & 4) == 4;
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;
      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos_l;

      switch (yy_action) {

        case 55: 
        case 56: 
          {  
 }
        case 76: break;
        case 52: 
          { 
    yybegin(TOP);
    Integer number = new Integer(yytext().substring(0, yytext().length()-1));
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createValue(number));
 }
        case 77: break;
        case 13: 
        case 17: 
        case 18: 
        case 21: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 33: 
        case 35: 
        case 39: 
        case 40: 
          {  
       throw new ParseError("Illegal character <"+ yytext() + ">", this); 
    }
        case 78: break;
        case 23: 
          {  return (new Token(Symbols.Close, yytext(), yyline, yychar));  }
        case 79: break;
        case 15: 
        case 30: 
        case 37: 
          { 
    yybegin(TOP);
    return (new Token(Symbols.Semi, yytext(), yyline, yychar)); 
 }
        case 80: break;
        case 20: 
          { 
    yybegin(TOP);
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createValue(null));
 }
        case 81: break;
        case 45: 
        case 62: 
          { 
    Property property = Property.createProperty(yytext().substring(0, yytext().length()-1));
    if (property instanceof Property.Move)
    {
	yybegin(MOVE);
    }
    else if (property instanceof Property.AddStones)
    {
	yybegin(POINTS);
    }
    else if (property instanceof Property.Label)
    {
        yybegin(LABEL);
    }
    else if (property instanceof Property.Markup)
    {
        yybegin(POINTS);
    }
    else if (property instanceof Property.View)
    {
        yybegin(POINTS);
    }
    else if (property instanceof Property.Text)
    {
        yybegin(TEXT);
    }
    else if (property instanceof Property.Charset)
    {
        yybegin(TEXT);
    }
    else if (property instanceof Property.Number)
    {
        yybegin(NUMBER);
    }
    else if (property instanceof Property.RootNumber)
    {
        yybegin(NUMBER);
    }
    else if (property instanceof Property.GameInfo)
    {
	yybegin(TEXT);
    }
    else
    {
	yybegin(PROPERTY);
    }
    return new Token(Symbols.Property, yytext(), yyline, yychar, property);
 }
        case 82: break;
        case 14: 
          {  level++; return (new Token(Symbols.Open, yytext(), yyline, yychar));  }
        case 83: break;
        case 74: 
          { 
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createPointList(yytext().substring(0,5)));
 }
        case 84: break;
        case 66: 
          { 
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createPointList(yytext().substring(0,2)));
 }
        case 85: break;
        case 32: 
          {  
    yybegin(TOP);
    return new Token(Symbols.Value, "", yyline, yychar, AbstractValue.createValue(""));
 }
        case 86: break;
        case 54: 
          {  
    Token next = (Token) next_token();
    return new Token(Symbols.Value, yytext().substring(1) + next.m_text, yyline, yychar, AbstractValue.createValue(yytext().substring(1) + next.m_text));
 }
        case 87: break;
        case 65: 
          { 
    yybegin(TOP);
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createPoint(yytext().substring(0,2)));
 }
        case 88: break;
        case 19: 
          { 
    String text = yytext();
    Token next = (Token) next_token();
    return new Token(Symbols.Value, text + next.m_text, yyline, yychar, AbstractValue.createValue(text + next.m_text));
 }
        case 89: break;
        case 24: 
          { 
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createPointList(""));
 }
        case 90: break;
        case 59: 
          { 
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createValue(yytext()));
 }
        case 91: break;
        case 9: 
        case 10: 
        case 11: 
        case 12: 
          { 
 }
        case 92: break;
        case 38: 
          { 
    yybegin(TOP);
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createValue(yytext().substring(0, yytext().length()-1)));
 }
        case 93: break;
        case 16: 
          {  level--; /*if (level==0) yybegin(YYINITIAL); */ return (new Token(Symbols.Close, yytext(), yyline, yychar));  }
        case 94: break;
        case 36: 
          {   }
        case 95: break;
        case 73: 
          { 
    return new Token(Symbols.Value, yytext(), yyline, yychar, AbstractValue.createLabel(yytext().substring(0,2), yytext().substring(3, yytext().length()-1)));
 }
        case 96: break;
        case 31: 
        case 34: 
        case 53: 
          {  
    String text = "\n";
    Token next = (Token) next_token();
    return new Token(Symbols.Value, text + next.m_text, yyline, yychar, AbstractValue.createValue(text + next.m_text));
 }
        case 97: break;
        case 7: 
        case 29: 
          {  
    String text = yytext();
    Token next = (Token) next_token();
    return new Token(Symbols.Value, text + next.m_text, yyline, yychar, AbstractValue.createValue(text + next.m_text));
 }
        case 98: break;
        case 22: 
          {  return (new Token(Symbols.Open, yytext(), yyline, yychar));  }
        case 99: break;
        case 42: 
          { 
    yybegin(TOP);
    level++;
    return (new Token(Symbols.Open, yytext(), yyline, yychar));
 }
        case 100: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
